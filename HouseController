package com.neumont.csc150.controller;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;

import com.neumont.csc150.model.*;
import com.neumont.csc150.view.ViewInterface;

public class HouseController implements ControllerInterface {
	private static final String SAVE_REGEX = ":";
	private static final String INV_REGEX = ",";
	private static final int ROOMMAX = 101;
	private static final int BIOME_1_END = 10;
	private static final int BIOME_2_END = 30;
	private static final int BIOME_3_END = 60;
	private static final int BIOME_4_END = 100;
	private static final int FOREST_BOSS = BIOME_1_END - 1;
	private static final int MOUNTAIN_BOSS = BIOME_2_END - 1;
	private static final int URBAN_BOSS = BIOME_3_END - 1;
	private static final int CAVERN_BOSS = BIOME_4_END - 1;
	private static final int FINAL_BOSS = ROOMMAX - 1;
	private static final int INSTANCE_MAX = 15;
	private static final int BOSS_MAX = 5;
	private static final int FOEMAX = 6;
	private static final int ITEMMAX = 30;
	private static final int WEAPON_INDEX = 0;
	private static final int ARMOR_INDEX = 1;
	private static final int ACCESSORY_INDEX = 2;
	private static final int CAPRA_X = 2;
	private static final int CAPRA_Y = 1;
	private static final String BIOME_1_NAME = "Forest";
	private static final String BIOME_2_NAME = "Mountain";
	private static final String BIOME_3_NAME = "Crimson City";
	private static final String BIOME_4_NAME = "Cavern";
	private static final String FINAL_ROOM_NAME = "Ragnarok Chamber";
	private Room[] rooms = new Room[ROOMMAX];
	private Entity[] foes = new Entity[FOEMAX];
	private Item[] inventory = new Item[ITEMMAX];
	private String[] instances = new String[INSTANCE_MAX];
	private String[] bossInstances = new String[BOSS_MAX];
	private String[] itemInstances = new String[INSTANCE_MAX];
	private Entity player;
	private String name;
	private tileBiome currentBiome;
	private int currentRoom;
	private ViewInterface UI;
	
//	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// G A M E   M E T H O D S ////
//	///////////////////////////////
	public void run() {
		this.createRooms();
		this.createInstances();
		//create driver window, which calls the main game into existence and sets name and new game or loads
		
	}
	
	public void newGame(String name) {
		player = new Entity(name, 0, 1000, 200, 200, 200);
		this.setCurrentRoom(0);
		this.setCurrentBiome(rooms[this.getCurrentRoom()].getBiome());
	}
	/**
	 * The save method is incremental, only saving the floor that starts the biome.
	 * Items and new equipment are not saved, to prevent farming and subsequent overflow.
	 * Experience gained before quitting is lost, but experience gained before death is retained.
	 * @param filePath
	 */
	public void saveGame(String filePath) { //Name:health:atk:def:spd:lv:exp:inventory:currentRoom
		
	}
	
	public void loadGame(String filePath) {
		String save;
		String[] parser;
		int health;
		int atk;
		int def;
		int spd;
		String[] invParser;
		
		try {
			FileInputStream fileIn = new FileInputStream(filePath);
			InputStreamReader reader = new InputStreamReader(fileIn);
			BufferedReader in = new BufferedReader(reader);
			save = in.readLine();
			in.close();
			parser = save.split(SAVE_REGEX);
			this.setName(parser[0]);
			health = Integer.parseInt(parser[1]);
			atk = Integer.parseInt(parser[2]);
			def = Integer.parseInt(parser[3]);
			spd = Integer.parseInt(parser[4]);
			this.player = new Entity(this.getName(), 0, health, atk, def, spd);
			this.player.setLevel(Integer.parseInt(parser[4]));
			this.player.setExp(Integer.parseInt(parser[5]));
			invParser = parser[6].split(",");
		}
		catch(Exception e) {
			UI.errorMessage("File load failed. Ensure that the file has not been tampered with, or start a new game.");
			return;
		}
		
	}
	
	public String getBiomeName() {
		switch(this.getCurrentBiome()) {
		case FOREST:
			return BIOME_1_NAME;
		case MOUNTAIN:
			return BIOME_2_NAME;
		case URBAN:
			return BIOME_3_NAME;
		case CAVERN:
			return BIOME_4_NAME;
		case FINAL:
			return FINAL_ROOM_NAME;
		default:
			return "???";
		}
		
	}
	
	public String getPlayerData() {
		return this.player.toString();
	}
//	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// G E N E R A T I O N   M E T H O D S ////
//	///////////////////////////////////////////
	public void loadRoom() {
		Room room = rooms[this.getCurrentRoom()];
		Entity foe;
		Tile tile;
		boolean bossRoom = false;
		this.checkBiome();
		this.instantiatePlayer();
		switch (this.getCurrentRoom()) {
		case FOREST_BOSS:
		case MOUNTAIN_BOSS:
		case URBAN_BOSS:
		case CAVERN_BOSS:
		case FINAL_BOSS:
			bossRoom = true;
		}
		if (!bossRoom) {
			switch (this.getCurrentBiome()) {
			case FOREST:
				this.parseInstance(this.instances[(int)(Math.random() * 3) + 3]); // Instances 3-5
				break;
			case MOUNTAIN:
				this.parseInstance(this.instances[(int)(Math.random() * 7) + 2]); // Instances 2-8
				break;
			case URBAN:
				this.parseInstance(this.instances[(int)(Math.random() * 11) + 1]); // Instances 1-11
				break;
			case CAVERN:
				this.parseInstance(this.instances[(int)(Math.random() * INSTANCE_MAX)]); //Instances 0-14
				break;
			default:
				this.parseInstance("cA:cA:cA:cA:cA:cA"); //For those dirty hackers c:
				break;
			}
		}
		else {
			switch (this.getCurrentBiome()) {
			case FOREST:
				this.createBoss(this.bossInstances[0]);
				break;
			case MOUNTAIN:
				this.createBoss(this.bossInstances[1]);
				break;
			case URBAN:
				this.createBoss(this.bossInstances[2]);
				break;
			case CAVERN:
				this.createBoss(this.bossInstances[3]);
				break;
			case FINAL:
				this.createBoss(this.bossInstances[4]);
				break;
			}
		}
		for (int index = 0; index < FOEMAX; index++) {
			foe = foes[index];
			
			if (foe != Entity.NONE) {
				tile = room.getTile(foe.getxCoord(), foe.getyCoord());
				tile.setOccupied(true);
				tile.setOccupant(foe);
			}
			else {
				break;
			}
		}
		// method call to graphically display this room and its enemies
	}
	
	public void checkBiome() {
		int roomNumber = this.getCurrentRoom();
		
		if (roomNumber < BIOME_1_END) {
			this.setCurrentBiome(tileBiome.FOREST);
		}
		else if (roomNumber < BIOME_2_END) {
			this.setCurrentBiome(tileBiome.MOUNTAIN);
		}
		else if (roomNumber < BIOME_3_END) {
			this.setCurrentBiome(tileBiome.URBAN);
		}
		else if (roomNumber < BIOME_4_END) {
			this.setCurrentBiome(tileBiome.CAVERN);
		}
		else {
			this.setCurrentBiome(tileBiome.FINAL);
		}
		
	}
	
	private void instantiatePlayer() {
		Room room = this.rooms[this.getCurrentRoom()];
		Tile tile;
		roomType type = room.getType();
		int spawnX = room.getSpawnX();
		int spawnY = room.getSpawnY();
		
		if (type == roomType.bottomLeft || type == roomType.bottomRight || type == roomType.bottomTop) {
			this.player.setxCoord(spawnX);
			this.player.setyCoord(spawnY - 1);
			this.player.setDirection(Direction.NORTH);
			tile = room.getTile(this.player.getxCoord(), this.player.getyCoord());
			tile.setOccupied(true);
			tile.setOccupant(this.player);
		}
		if (type == roomType.leftBottom || type == roomType.leftRight || type == roomType.leftTop) {
			this.player.setxCoord(spawnX + 1);
			this.player.setyCoord(spawnY);
			this.player.setDirection(Direction.EAST);
			tile = room.getTile(this.player.getxCoord(), this.player.getyCoord());
			tile.setOccupied(true);
			tile.setOccupant(this.player);
		}
		if (type == roomType.rightBottom || type == roomType.rightLeft || type == roomType.rightTop) {
			this.player.setxCoord(spawnX - 1);
			this.player.setyCoord(spawnY);
			this.player.setDirection(Direction.WEST);
			tile = room.getTile(this.player.getxCoord(), this.player.getyCoord());
			tile.setOccupied(true);
			tile.setOccupant(this.player);
		}
		if (type == roomType.topBottom || type == roomType.topLeft || type == roomType.topRight) {
			this.player.setxCoord(spawnX);
			this.player.setyCoord(spawnY + 1);
			this.player.setDirection(Direction.SOUTH);
			tile = room.getTile(this.player.getxCoord(), this.player.getyCoord());
			tile.setOccupied(true);
			tile.setOccupant(this.player);
		}
		
	}
//	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// I N V E N T O R Y   M E T H O D S ////
//	/////////////////////////////////////////
	public Item createItem(String item) {
		switch (item) {
		case "heal_S":
			return new HealItem("Healing Root", Size.SMALL);
		case "exp_S":
			return new ExpItem("Lesser Wisp", Size.SMALL);
		case "wep_S":
			return new Equip(itemType.WEAPON, "Worn Knife", 1.1, Entity.BASE_MOD, Entity.BASE_MOD);
		case "arm_S":
			return new Equip(itemType.ARMOR, "Worn Coat", Entity.BASE_MOD, 1.1, Entity.BASE_MOD);
		case "acc_S":
			return new Equip(itemType.ACCESSORY, "Flip-Flops", Entity.BASE_MOD, Entity.BASE_MOD, 1.1);
		case "heal_M":
			return new HealItem("Healing Salve", Size.MEDIUM);
		case "exp_M":
			return new ExpItem("Greater Wisp", Size.MEDIUM);
		case "wep_M":
			return new Equip(itemType.WEAPON, "Machete", 1.2, Entity.BASE_MOD, Entity.BASE_MOD);
		case "arm_M":
			return new Equip(itemType.ARMOR, "Heavy Trenchcoat", Entity.BASE_MOD, 1.2, Entity.BASE_MOD);
		case "acc_M":
			return new Equip(itemType.ACCESSORY, "Running Shoes", Entity.BASE_MOD, Entity.BASE_MOD, 1.2);
		case "heal_L":
			return new HealItem("Thaumaturge", Size.LARGE);
		case "exp_L":
			return new ExpItem("Fallen Soul", Size.LARGE);
		case "wep_L":
			return new Equip(itemType.WEAPON, "Tungsten Hatchet", 1.3, Entity.BASE_MOD, Entity.BASE_MOD);
		case "arm_L":
			return new Equip(itemType.ARMOR, "Edgy Chainmail Coat", Entity.BASE_MOD, 1.3, Entity.BASE_MOD);
		case "acc_L":
			return new Equip(itemType.ACCESSORY, "Ergonomic Combats", Entity.BASE_MOD, Entity.BASE_MOD, 1.3);
		default:
			return Item.NO_ITEM;
		}
		
	}
//	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// E N E M I E S   A N D   P A T H - F I N D I N G ////
//	///////////////////////////////////////////////////////
	/**
	 * Takes a string from random selection and uses it to generate the enemies of a room.
	 * For use with the instances array.
	 * @param instance
	 */
	public void parseInstance(String instance) {
		Entity current;
		Room room = this.rooms[this.getCurrentRoom()];
		String[] parse = instance.split(":");
		int limit = (int)(Math.random() * player.getLevel());
		int count = parse.length;
		
		for (@SuppressWarnings("unused") Entity foe : foes) {
			foe = null;
		}
		
		for (int index = 0; index < count; index++) {
			current = this.foes[index];
			try {
//				/// Fixed Enemies ///
				if (parse[index].equals("cA")) {
					current = new Entity("Capra", 2, 2000, 400, 400, 400); // Capra, event demon
					current.setxCoord(CAPRA_X);
					current.setyCoord(CAPRA_Y);
					current.setDirection(Direction.SOUTH);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
				}
				if (parse[index].equals("oR")) {
					current = new Entity("Ornstein", 1, 1000, 300, 300, 350);
					current.setxCoord(CAPRA_X - 1);
					current.setyCoord(CAPRA_Y);
					current.setDirection(Direction.EAST);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
				}
				if (parse[index].equals("sM")) {
					current = new Entity("Smough", 1, 1000, 300, 350, 300);
					current.setxCoord(CAPRA_X + 1);
					current.setyCoord(CAPRA_Y);
					current.setDirection(Direction.WEST);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
				}
				if (parse[index].equals("aT")) {
					current = new Entity("Artorias", 1, 1000, 350, 300, 300);
					current.setxCoord(CAPRA_X);
					current.setyCoord(CAPRA_Y + 1);
					current.setDirection(Direction.NORTH);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
				}
				if (parse[index].equals("fL")) {
					current = new Entity("Floofy", 2, 2000, 750, 750, 750);
					current.setxCoord(this.foes[0].getxCoord() + 1);
					current.setyCoord(this.foes[0].getyCoord());
					current.setDirection(Direction.SOUTH);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
				}
//				/// Scaled Enemies ///
				if (parse[index].equals("Ag")) {
					this.createDynamicFoe("Agni", "atk", index, limit);
				}
				if (parse[index].equals("Db")) {
					this.createDynamicFoe("Diba", "def", index, limit);
				}
				if (parse[index].equals("Se")) {
					this.createDynamicFoe("Seth", "spd", index, limit);
				}
				if (parse[index].equals("Ar")) {
					this.createStrongDynamicFoe("Argos", "atk", index, limit);
				}
				if (parse[index].equals("Dy")) {
					this.createStrongDynamicFoe("Dynon", "def", index, limit);
				}
				if (parse[index].equals("Sr")) {
					this.createStrongDynamicFoe("Sorig", "spd", index, limit);
				}
			}
			catch (IndexOutOfBoundsException e) {
				current = Entity.NONE;
			}
		}
		while (!this.finalizeFoes()) {} // Keeps calling finalize until all the enemies are behaving and not phasing together
		
	}
	/**
	 * Creates a boss encounter at set floors
	 * @param bossInstance
	 */
	public void createBoss(String instance) {
		Entity boss = this.foes[0];
		Room room = this.rooms[this.getCurrentRoom()];
		
		for (@SuppressWarnings("unused") Entity foe : foes) {
			foe = Entity.NONE;
		}
		
		if (instance.equals("dI")) {
			boss = new Entity("Dirge", 1, 2000, 200, 200, 200);
		}
		if (instance.equals("eP")) {
			boss = new Entity("Epitaph", 1, 2000, 300, 300, 300); 
		}
		if (instance.equals("kN")) {
			boss = new Entity("Knell", 1, 3000, 400, 400, 400);
		}
		if (instance.equals("rQ")) {
			boss = new Entity("Requiem", 1, 4000, 500, 500, 500);
		}
		if (instance.equals("rA")) {
			boss = new Entity("Ragnarok", 1, 20, 600, 9999, 600);
		}
		
		boss.setxCoord(Room.ROOMMAX_X / 2);
		boss.setyCoord(Room.ROOMMAX_Y / 2);
		boss.setDirection(Direction.SOUTH);
		room.getTile(boss.getxCoord(), boss.getyCoord()).setOccupied(true);
		room.getTile(boss.getxCoord(), boss.getyCoord()).setOccupant(boss);
		
	}
	/**
	 * creates a standard enemy, scaled to the player's level.
	 * @param name
	 * @param type
	 * @param index
	 * @param limit
	 */
	private void createDynamicFoe(String name, String type, int index, int limit) {
		Entity foe = this.foes[index];
		Room room = this.rooms[this.getCurrentRoom()];
		
		if (type.equals("atk")) {
			foe = new Entity(name, 1, 1000, 200, 100, 100);
		}
		if (type.equals("def")) {
			foe = new Entity(name, 1, 1000, 100, 200, 100);
		}
		if (type.equals("spd")) {
			foe = new Entity(name, 1, 1000, 100, 100, 200);
		}
		
		foe.setxCoord((int)(Math.random() * (Room.ROOMMAX_X - Room.PADDING) + (Room.PADDING / 2)));
		foe.setyCoord((int)(Math.random() * (Room.ROOMMAX_Y - Room.PADDING) + (Room.PADDING / 2)));
		foe.setDirection(Direction.SOUTH);
		room.getTile(foe.getxCoord(), foe.getyCoord()).setOccupied(true);
		room.getTile(foe.getxCoord(), foe.getyCoord()).setOccupant(foe);
		
		for (int lvIndex = 0; lvIndex < limit; lvIndex++) {
			foe.addExp(this.player);
			foe.checkExp();
		}
		
	}
	/**
	 * Creates a stronger foe scaled to the player's level.
	 * Intended for later in the game.
	 * @param name
	 * @param type
	 * @param index
	 * @param limit
	 */
	private void createStrongDynamicFoe(String name, String type, int index, int limit) {
		Entity foe = this.foes[index];
		Room room = this.rooms[this.getCurrentRoom()];
		
		if (type.equals("atk")) {
			foe = new Entity(name, 1, 1500, 300, 200, 200);
		}
		
		if (type.equals("def")) {
			foe = new Entity(name, 1, 1500, 200, 300, 200);
		}
		
		if (type.equals("spd")) {
			foe = new Entity(name, 1, 1500, 200, 200, 300);
		}
		foe.setxCoord((int)(Math.random() * (Room.ROOMMAX_X - Room.PADDING) + (Room.PADDING / 2)));
		foe.setyCoord((int)(Math.random() * (Room.ROOMMAX_Y - Room.PADDING) + (Room.PADDING / 2)));
		foe.setDirection(Direction.SOUTH);
		room.getTile(foe.getxCoord(), foe.getyCoord()).setOccupied(true);
		room.getTile(foe.getxCoord(), foe.getyCoord()).setOccupant(foe);
		
		for (int lvIndex = 0; lvIndex < (limit + 1); lvIndex++) {
			foe.addExp(this.player);
			foe.checkExp();
		}
		
	}
	/**
	 * Ensures that all enemies are properly generated, and not occupying the same square.
	 * This method randomly moves a foe when they fail to meet its constraints until they pass.
	 * Also prevents enemies from being in the same square as the player, who is generated first.
	 * When foes are relocated, the tiles' values are maintained as well to prevent discrepancies.
	 * @return
	 */
	private boolean finalizeFoes() {
		Room room = this.rooms[this.getCurrentRoom()];
		int move;
		
		for (Entity current : this.foes) {
			
			if ((Math.random() * 2) < 1) {
				move = 1;
			}
			else {
				move = -1;
			}
			
			if (current == null) {
				current = Entity.NONE;
			}
			else {
				if (current.getxCoord() == this.player.getxCoord() && current.getyCoord() == this.player.getyCoord()) {
					if ((Math.random() * 2 < 1)) {
						room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(this.player);
						current.setxCoord(current.getxCoord() + move);
						room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
						room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
					}
					else {
						room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(this.player);
						current.setyCoord(current.getyCoord() + move);
						room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
						room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
					}
					
					return false;
				}
				
				for (Entity foe : this.foes) {
					
					if (current.getxCoord() == foe.getxCoord() && current.getyCoord() == foe.getyCoord()) {
						if ((Math.random() * 2 < 1)) {
							room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
							foe.setxCoord(foe.getxCoord() + move);
							room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
							room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(foe);
						}
						else {
							room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
							foe.setyCoord(foe.getyCoord() + move);
							room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
							room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(foe);
						}
						
						return false;
					}
				}
				
				if (current.getxCoord() < (Room.PADDING / 2)) {
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(false);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(Entity.NONE);
					current.setxCoord(current.getxCoord() + Math.abs(move));
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
					return false;
				}
				if (current.getxCoord() > (Room.ROOMMAX_X - Room.PADDING)) {
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(false);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(Entity.NONE);
					current.setxCoord(current.getxCoord() - Math.abs(move));
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
					return false;
				}
				if (current.getyCoord() < (Room.PADDING / 2)) {
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(false);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(Entity.NONE);
					current.setyCoord(current.getyCoord() + Math.abs(move));
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
					return false;
				}
				if (current.getyCoord() > (Room.ROOMMAX_Y - Room.PADDING)) {
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(false);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(Entity.NONE);
					current.setyCoord(current.getyCoord() - Math.abs(move));
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupied(true);
					room.getTile(current.getxCoord(), current.getyCoord()).setOccupant(current);
					return false;
				}
			}
		}
		
		return true;
	}
	
	/**
	 * Each enemy will check for hostiles, then target and move towards the closest one.
	 * This includes the player.
	 * Attacking an eligible target is also included.
	 * @param entity
	 */
	public void aiTurn(Entity entity) {
		Entity target = new Entity();
		Room room = rooms[this.getCurrentRoom()];
		int entityX = entity.getxCoord();
		int entityY = entity.getyCoord();
		int minDistance = 0;
		int foeX;
		int foeY;
		int xDistance = 0;
		int yDistance = 0;
		int targetxDistance = 0;
		int targetyDistance = 0;
//		/// Check if others in the foe array are hostile and nearby ///
		for (Entity foe: foes) {
			if (entity.getHostile() != foe.getHostile() && foe != Entity.NONE) {
				foeX = foe.getxCoord();
				foeY = foe.getyCoord();
				xDistance = Math.abs(entityX - foeX);
				yDistance = Math.abs(entityY - foeY);
				
				if (minDistance == 0 || minDistance > (xDistance + yDistance)) {
					minDistance = xDistance + yDistance;
					targetxDistance = xDistance;
					targetyDistance = yDistance;
					target = foe;
				}
			}
		}
//		/// Sets the player as a target if they are the closest hostile ///
		foeX = player.getxCoord();
		foeY = player.getyCoord();
		xDistance = Math.abs(entityX - foeX);
		yDistance = Math.abs(entityY - foeY);
			
		if (minDistance == 0 || minDistance > (xDistance + yDistance)) {
			minDistance = xDistance + yDistance;
			targetxDistance = xDistance;
			targetyDistance = yDistance;
			target = player;
		}
//		/// Moves to target randomly if far from target ///
		if ((Math.random() * 2) < 1) {
			if (entity.getxCoord() < target.getxCoord()) {
				if (targetxDistance > 1 && !room.getTile(entity.getxCoord() + 1, entity.getyCoord()).isOccupied()) {
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
					entity.setxCoord(entity.getxCoord() + 1);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
					return;
				}
			}
			if (entity.getxCoord() > target.getxCoord()) {
				if (targetxDistance > 1 && !room.getTile(entity.getxCoord() - 1, entity.getyCoord()).isOccupied()) {
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
					entity.setxCoord(entity.getxCoord() - 1);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
					return;
				}
			}
		}
		else {
			if (entity.getyCoord() < target.getyCoord()) {
				if (targetyDistance > 1 && !room.getTile(entity.getxCoord(), entity.getyCoord() + 1).isOccupied()) {
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
					entity.setyCoord(entity.getyCoord() + 1);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
					return;
				}
			}
			if (entity.getyCoord() > target.getyCoord()) {
				if (targetyDistance > 1 && !room.getTile(entity.getxCoord(), entity.getyCoord() + 1).isOccupied()) {
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
					entity.setyCoord(entity.getyCoord() - 1);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
					room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
					return;
				}
			}
		}
//		/// Handles attacking when in range and lateral moves ///
		if (targetxDistance == 0) {
			if (targetyDistance == 1) {
				entity.attack(target);
				return;
			}
			else {
				if (entity.getyCoord() < target.getyCoord()) {
					if (targetyDistance > 1 && !room.getTile(entity.getxCoord(), entity.getyCoord() + 1).isOccupied()) {
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
						entity.setyCoord(entity.getyCoord() + 1);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
						return;
					}
				}
				if (entity.getyCoord() > target.getyCoord()) {
					if (targetyDistance > 1 && !room.getTile(entity.getxCoord(), entity.getyCoord() - 1).isOccupied()) {
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
						entity.setyCoord(entity.getyCoord() - 1);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
						return;
					}
				}
			}
		}
		if (targetyDistance == 0) {
			if (targetxDistance == 1) {
				entity.attack(target);
				return;
			}
			else {
				if (entity.getxCoord() < target.getxCoord()) {
					if (targetxDistance > 1 && !room.getTile(entity.getxCoord() + 1, entity.getyCoord()).isOccupied()) {
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
						entity.setxCoord(entity.getxCoord() + 1);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
						return;
					}
				}
				if (entity.getxCoord() > target.getxCoord()) {
					if (targetxDistance > 1 && !room.getTile(entity.getxCoord() - 1, entity.getyCoord()).isOccupied()) {
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(false);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(Entity.NONE);
						entity.setxCoord(entity.getxCoord() - 1);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupied(true);
						room.getTile(entity.getxCoord(), entity.getyCoord()).setOccupant(entity);
						return;
					}
				}
			}
		}
		
	}
	
//	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	/// G E N E R A T I O N ////
//	///////////////////////////
	/**
	 * Initializes the instances array, which is used to create enemies on a floor. Also creates bosses for each biome, and the end.
	 * Forest uses 3-5 on instances and 0-4 on items.
	 * Mountain uses 2-8 on instances and 0-9 on items.
	 * City uses 1-11 on instances and 5-14 on items.
	 * Cavern uses 0-14 on instances and 10-14 on items.
	 */
	public void createInstances() {
//		/// Fixed Instances ///
		instances[0]  = "cA:cA";
		instances[1]  = "cA:oR:sM:aT";
		instances[2]  = "Ag:fL";
//		/// Scaled Instances ///
		instances[3]  = "Ag";
		instances[4]  = "Ag:Db";
		instances[5]  = "Ag:Db:Se";
		instances[6]  = "Ag:Db:Se:Ag";
		instances[7]  = "Ag:Db:Se:Ag:Db";
		instances[8]  = "Ag:Db:Se:Ag:Db:Se";
		instances[9]  = "Ar";
		instances[10] = "Ar:Dy";
		instances[11] = "Ar:Dy:Sr";
		instances[12] = "Ar:Dy:Sr:Ar";
		instances[13] = "Ar:Dy:Sr:Ar:Dy";
		instances[14] = "Ar:Dy:Sr:Ar:Dy:Sr";
//		/// Bosses ///
		bossInstances[0] = "dI";
		bossInstances[1] = "eP";
		bossInstances[2] = "kN";
		bossInstances[3] = "rQ";
		bossInstances[4] = "rA";
//		/// Items ///
		itemInstances[0]  = "heal_S";
		itemInstances[1]  = "exp_S";
		itemInstances[2]  = "wep_S";
		itemInstances[3]  = "arm_S";
		itemInstances[4]  = "acc_S";
		itemInstances[5]  = "heal_M";
		itemInstances[6]  = "exp_M";
		itemInstances[7]  = "wep_M";
		itemInstances[8]  = "arm_M";
		itemInstances[9]  = "acc_M";
		itemInstances[10] = "heal_L";
		itemInstances[11] = "exp_L";
		itemInstances[12] = "wep_L";
		itemInstances[13] = "arm_L";
		itemInstances[14] = "acc_L";
		
	}
	/**
	 * Sets the path for all rooms, as well as the biome.
	 * As it stands, biome 1 has 10 rooms, 2 has 20, 3 has 30, 4 has 40.
	 * A final boss room exists but is considered its own biome at room 101.
	 */
	public void createRooms() {
		tileBiome biome;
//		/// Biome 1 ///
		biome = tileBiome.FOREST;
		rooms[0] = new Room(biome, roomType.bottomTop, 1);
		rooms[1] = new Room(biome, roomType.bottomTop, 2);
		rooms[2] = new Room(biome, roomType.bottomRight, 3);
		rooms[3] = new Room(biome, roomType.leftTop, 4);
		rooms[4] = new Room(biome, roomType.bottomTop, 5);
		rooms[5] = new Room(biome, roomType.bottomLeft, 6);
		rooms[6] = new Room(biome, roomType.rightTop, 7);
		rooms[7] = new Room(biome, roomType.bottomTop, 8);
		rooms[8] = new Room(biome, roomType.bottomLeft, 9);
		rooms[9] = new Room(biome, roomType.rightLeft, 10);
//		/// Biome 2 ///
		biome = tileBiome.MOUNTAIN;
		rooms[10] = new Room(biome, roomType.rightLeft, 11);
		rooms[11] = new Room(biome, roomType.rightTop, 12);
		rooms[12] = new Room(biome, roomType.bottomLeft, 13);
		rooms[13] = new Room(biome, roomType.rightLeft, 14);
		rooms[14] = new Room(biome, roomType.rightTop, 15);
		rooms[15] = new Room(biome, roomType.bottomLeft, 16);
		rooms[16] = new Room(biome, roomType.rightLeft, 17);
		rooms[17] = new Room(biome, roomType.rightLeft, 18);
		rooms[18] = new Room(biome, roomType.rightTop, 19);
		rooms[19] = new Room(biome, roomType.bottomTop, 20);
		rooms[20] = new Room(biome, roomType.bottomTop, 21);
		rooms[21] = new Room(biome, roomType.bottomLeft, 22);
		rooms[22] = new Room(biome, roomType.rightTop, 23);
		rooms[23] = new Room(biome, roomType.bottomTop, 24);
		rooms[24] = new Room(biome, roomType.bottomRight, 25);
		rooms[25] = new Room(biome, roomType.leftRight, 26);
		rooms[26] = new Room(biome, roomType.leftRight, 27);
		rooms[27] = new Room(biome, roomType.leftRight, 28);
		rooms[28] = new Room(biome, roomType.leftTop, 29);
		rooms[29] = new Room(biome, roomType.bottomTop, 30);
//		/// Biome 3 ///
		biome = tileBiome.URBAN;
		rooms[30] = new Room(biome, roomType.bottomTop, 31);
		rooms[31] = new Room(biome, roomType.bottomTop, 32);
		rooms[32] = new Room(biome, roomType.bottomLeft, 33);
		rooms[33] = new Room(biome, roomType.rightLeft, 34);
		rooms[34] = new Room(biome, roomType.rightLeft, 35);
		rooms[35] = new Room(biome, roomType.rightTop, 36);
		rooms[36] = new Room(biome, roomType.bottomTop, 37);
		rooms[37] = new Room(biome, roomType.bottomTop, 38);
		rooms[38] = new Room(biome, roomType.bottomRight, 39);
		rooms[39] = new Room(biome, roomType.leftRight, 40);
		rooms[40] = new Room(biome, roomType.leftRight, 41);
		rooms[41] = new Room(biome, roomType.leftTop, 42);
		rooms[42] = new Room(biome, roomType.bottomTop, 43);
		rooms[43] = new Room(biome, roomType.bottomTop, 44);
		rooms[44] = new Room(biome, roomType.bottomTop, 45);
		rooms[45] = new Room(biome, roomType.bottomTop, 46);
		rooms[46] = new Room(biome, roomType.bottomTop, 47);
		rooms[47] = new Room(biome, roomType.bottomRight, 48);
		rooms[48] = new Room(biome, roomType.leftRight, 49);
		rooms[49] = new Room(biome, roomType.leftRight, 50);
		rooms[50] = new Room(biome, roomType.leftBottom, 51);
		rooms[51] = new Room(biome, roomType.topBottom, 52);
		rooms[52] = new Room(biome, roomType.topBottom, 53);
		rooms[53] = new Room(biome, roomType.topRight, 54);
		rooms[54] = new Room(biome, roomType.leftRight, 55);
		rooms[55] = new Room(biome, roomType.leftRight, 56);
		rooms[56] = new Room(biome, roomType.leftTop, 57);
		rooms[57] = new Room(biome, roomType.bottomTop, 58);
		rooms[58] = new Room(biome, roomType.bottomTop, 59);
		rooms[59] = new Room(biome, roomType.bottomTop, 60);
//		/// Biome 4 ///
		biome = tileBiome.CAVERN;
		rooms[60] = new Room(biome, roomType.bottomTop, 61);
		rooms[61] = new Room(biome, roomType.bottomRight, 62);
		rooms[62] = new Room(biome, roomType.leftRight, 63);
		rooms[63] = new Room(biome, roomType.leftTop, 64);
		rooms[64] = new Room(biome, roomType.bottomRight, 65);
		rooms[65] = new Room(biome, roomType.leftTop, 66);
		rooms[66] = new Room(biome, roomType.bottomRight, 67);
		rooms[67] = new Room(biome, roomType.leftTop, 68);
		rooms[68] = new Room(biome, roomType.bottomTop, 69);
		rooms[69] = new Room(biome, roomType.bottomTop, 70);
		rooms[70] = new Room(biome, roomType.bottomTop, 71);
		rooms[71] = new Room(biome, roomType.bottomLeft, 72);
		rooms[72] = new Room(biome, roomType.rightTop, 73);
		rooms[73] = new Room(biome, roomType.bottomLeft, 74);
		rooms[74] = new Room(biome, roomType.rightTop, 75);
		rooms[75] = new Room(biome, roomType.bottomLeft, 76);
		rooms[76] = new Room(biome, roomType.rightLeft, 77);
		rooms[77] = new Room(biome, roomType.rightLeft, 78);
		rooms[78] = new Room(biome, roomType.rightLeft, 79);
		rooms[79] = new Room(biome, roomType.rightBottom, 80);
		rooms[80] = new Room(biome, roomType.topLeft, 81);
		rooms[81] = new Room(biome, roomType.rightBottom, 82);
		rooms[82] = new Room(biome, roomType.topLeft, 83);
		rooms[83] = new Room(biome, roomType.rightBottom, 84);
		rooms[84] = new Room(biome, roomType.topBottom, 85);
		rooms[85] = new Room(biome, roomType.topBottom, 86);
		rooms[86] = new Room(biome, roomType.topBottom, 87);
		rooms[87] = new Room(biome, roomType.topRight, 88);
		rooms[88] = new Room(biome, roomType.leftBottom, 89);
		rooms[89] = new Room(biome, roomType.topRight, 90);
		rooms[90] = new Room(biome, roomType.leftBottom, 91);
		rooms[91] = new Room(biome, roomType.topRight, 92);
		rooms[92] = new Room(biome, roomType.leftRight, 93);
		rooms[93] = new Room(biome, roomType.leftTop, 94);
		rooms[94] = new Room(biome, roomType.bottomTop, 95);
		rooms[95] = new Room(biome, roomType.bottomTop, 96);
		rooms[96] = new Room(biome, roomType.bottomTop, 97);
		rooms[97] = new Room(biome, roomType.bottomTop, 98);
		rooms[98] = new Room(biome, roomType.bottomTop, 99);
		rooms[99] = new Room(biome, roomType.bottomTop, 100);
//		/// Final Room ///
		rooms[100] = new Room(tileBiome.FINAL, roomType.bottomTop, 101);
		
	}
	
//	/// Getters & Setters ///
	
	public Entity getPlayer() {
		return player;
		
	}
	
	public Entity[] getFoes() {
		return foes;
	}
	
	public String getInstance(int index) {
		return instances[index];
		
	}

	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}

	public tileBiome getCurrentBiome() {
		return currentBiome;
	}

	public void setCurrentBiome(tileBiome currentBiome) {
		this.currentBiome = currentBiome;
	}

	public int getCurrentRoom() {
		return currentRoom;
	}

	public void setCurrentRoom(int currentRoom) {
		this.currentRoom = currentRoom;
	}

}
